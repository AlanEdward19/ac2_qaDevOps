pipeline {
    agent any

    environment {
        APP_ENV = 'staging'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Start container') {
              steps {
                echo 'Starting container from Docker Hub...'
                bat 'docker-compose -f docker-compose.yml pull' // Baixa a imagem do Docker Hub
                bat 'docker-compose -f docker-compose.yml up -d --no-color'
                sleep time: 60, unit: 'SECONDS' // Aumenta o tempo para o serviço Spring Boot iniciar
                bat 'docker-compose -f docker-compose.yml logs' // Verifica os logs para conferir o status do Spring Boot
                bat 'docker-compose -f docker-compose.yml ps' // Verifica o status do container
              }
            }

        stage('Test') {
            steps {
                // Executa os testes de unidade
                bat 'mvn test -Dspring.profiles.active=staging'
            }
            post {
                always {
                    // Publica os relatórios JUnit, referenciando o caminho onde os relatórios XML são gerados
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Run tests against the container') {
            steps {
                bat 'curl http://localhost:8686 || echo "Service not responding"'
            }
        }
    }

    post {
        success {
            echo "Pipeline Staging concluído com sucesso."
        }
        failure {
            echo "Pipeline Staging falhou."
        }
    }
}
